<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何解决Idea使用git push时连接不上服务器</title>
      <link href="/2024/01/28/git/"/>
      <url>/2024/01/28/git/</url>
      
        <content type="html"><![CDATA[<p>之前有记录过一个相似的问题，但是由于上一代博客没有做好备份，这篇文章也是成功被我弄丢了。。。哎，都是经验和教训。</p><h2 id="问题简述："><a href="#问题简述：" class="headerlink" title="问题简述："></a>问题简述：</h2><p>先说说这次的问题：在Idea里搭好项目的基本框架后，像往常一样 “Share Project on Github”, 结果报错了，报错信息忘记保存了，但大概意思是：GitHub仓库搭建完成，但是项目提交失败。我去仓库看确实只有仓库，没有代码。于是我就准备自己再 push 一次，但是还是报错了（试了三次，项目名不太方便放，可以自行去我的仓库看）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/twigIcer/xxx.git/&#x27;: Failed to connect to github.com port 443 after 38150 ms: Couldn&#x27;t connect to server</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/twigIcer/markdown-img@main/imgs/1.png" alt=""></p><h2 id="探究过程："><a href="#探究过程：" class="headerlink" title="探究过程："></a>探究过程：</h2><h3 id="1-关闭代理："><a href="#1-关闭代理：" class="headerlink" title="1. 关闭代理："></a>1. 关闭代理：</h3><p>我一看 “443”，这不是我上次记录的问题嘛，我记得和代理有关，好像关闭代理就可以了，于是上网一搜，果然有这个答案：</p><p><a href="https://blog.csdn.net/good_good_xiu/article/details/118567249">git提交或克隆报错fatal: unable to access ‘https://github.com/tata20191003/autowrite.git/‘: Failed to connec-CSDN博客</a></p><p>解决方案是取消代理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//取消http代理</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">//取消https代理 </span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><p>但是关闭后还是报同样的错误。</p><blockquote><p>后来仔细一看，人家的报错是 “fatal: unable to access ‘<a href="https://github.com/xxx/autowrite.git/">https://github.com/xxx/autowrite.git/</a>‘: Failed to connect to github.com port 443: Timed out” ,连接超时，而我的报错是连接不上服务器。</p></blockquote><h3 id="2-关闭魔法："><a href="#2-关闭魔法：" class="headerlink" title="2. 关闭魔法："></a>2. 关闭魔法：</h3><p>我就在想是不是由于我开了魔法，但是刚才又关闭了代理，所以导致 push 又被墙了。</p><p>可是关闭了我的魔法后，还是报一样的错误。</p><h3 id="3-关闭本机代理："><a href="#3-关闭本机代理：" class="headerlink" title="3. 关闭本机代理："></a>3. 关闭本机代理：</h3><p>后面我又看到一个答案是说，可以去关闭电脑的代理（文章链接找不到了，抱歉），”设置-网络和Internet-使用代理服务器的编辑按钮-关闭-保存”。</p><p><img src="https://cdn.jsdelivr.net/gh/twigIcer/markdown-img@main/imgs/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-01-28%20125614.png" alt=""></p><p>可是很遗憾，还是不可以。</p><h3 id="4-尝试其他IDE"><a href="#4-尝试其他IDE" class="headerlink" title="4. 尝试其他IDE:"></a>4. 尝试其他IDE:</h3><p>我都在想是不是我的 git 出问题了，于是在 WebStorm 里尝试把前端部分提交上传，结果成功了，很显然是Idea的问题。</p><h2 id="正解："><a href="#正解：" class="headerlink" title="正解："></a>正解：</h2><p>于是我就先放下这个问题了，但是这个问题不解决，总感觉难受，直到我看到了正确解决方案：</p><p><a href="https://cloud.tencent.com/developer/article/2221680">git clone出现 fatal: unable to access ‘https://github.com/…’的解决办法(亲测有效)-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>我使用了上面这篇文章的解决方案二，手动配置git的代理。先将上面试错时关闭的本机代理重新开启，然后可以看到代理的Ip地址和端口，在 git bash 或者 Idea 终端用下面的命令指定代理即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 使用时将ip和端口换为自己的</span><br><span class="line">git config --global http.proxy http://127.0.0.1:7890 </span><br><span class="line"></span><br><span class="line">git config --global https.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>然后再次 push ，发现报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/twigIcer/xxx.git/&#x27;: Recv failure: Connection was reset</span><br></pre></td></tr></table></figure><p>连接重置，这个问题很常见了，重试就行了，于是重新 push ，成功推送，github仓库里也有了代码，问题解决。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>由于国内的限制，访问 github 需要开魔法，开了魔法可能导致Idea记录的的 ip和端口与代理服务器ip 端口不一致的情况，这时候就需要修改代理或者关闭代理。上次记录的问题是上面试错第一个，连接超时的问题，这个问题可以关闭代理来解决。而这次报错是连接不上服务器 443 端口 ，就需要去修改代理IP和端口与本机一致。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何解决跨域问题</title>
      <link href="/2024/01/24/ky001/"/>
      <url>/2024/01/24/ky001/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注意：本文重点并不是解决引入twikoo到博客的跨域问题，只是作为例子引出跨域问题！！</p></blockquote><p>前几天在部署twikoo评论系统到博客的时候，遇到了经典跨域问题，报错信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#x27;twikoo网址&#x27; from origin &#x27;我的服务器ip&#x27; has been blocked by CORS policy: Response to preflight request doesn&#x27;t pass access control check: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>看见”CORS” 和 “Access-Control-Allow-Origin”基本可以确定是跨域问题了，但是由于twikoo解决跨域问题比较复杂，需要在服务里去修改或者利用CDN加请求头，后面可能会把域名换一致去解决。</p><p>今天看鱼皮视频时，看见他把跨域问题讲的很清楚，这篇文章做个总结记录。</p><h2 id="跨域问题："><a href="#跨域问题：" class="headerlink" title="跨域问题："></a>跨域问题：</h2><h3 id="什么是跨域问题："><a href="#什么是跨域问题：" class="headerlink" title="什么是跨域问题："></a>什么是跨域问题：</h3><p>以下解释来自chatGPT:</p><blockquote><p>跨域问题指的是在网页中，当一个域名下的网页通过AJAX、Fetch或Web Socket等方式向另一个域名下的接口发送跨域请求时所遇到的限制和问题。同源策略是浏览器的一种安全策略，它规定了一个网页只能从相同的协议（如http、https）、域名和端口请求资源，而不能直接访问其他域名下的资源。</p><p>跨域问题的出现是为了确保用户的信息安全和保护网站的数据。但是，在实际的开发中，有时需要在不同的域名之间进行数据交互，这时就会遇到跨域问题。</p></blockquote><p>个人觉得鱼皮的解释更简洁清楚：</p><blockquote><p>浏览器为了用户的安全，仅允许同域名、同端口的服务器发送请求。</p></blockquote><p>如果服务器域名和端口不同就会发生跨域问题。</p><h3 id="预检请求："><a href="#预检请求：" class="headerlink" title="预检请求："></a><strong>预检请求</strong>：</h3><p>跨域预检请求（Cross-Origin Resource Sharing Pre-flight Request）是指在发送真正的跨域请求之前，浏览器会发送一个OPTIONS请求来向服务器获取权限，以确定是否能够发送跨域请求。</p><p>当满足以下条件之一时，浏览器会发送预检请求：</p><ol><li>使用非简单请求方法，如PUT、DELETE等。</li><li>使用非简单请求头部，如自定义的Content-Type、Authorization等。</li><li>其他需要进行预检的情况。</li></ol><p>预检请求的过程如下：</p><ol><li>浏览器自动发送一个OPTIONS请求，向目标服务器询问是否允许发送跨域请求。</li><li>服务器收到OPTIONS请求后，根据请求的头部信息（如Origin、Access-Control-Request-Method、Access-Control-Request-Headers等）进行验证和处理。</li><li>服务器根据验证结果，在响应头部中返回相应的信息给浏览器，以告知是否允许发送跨域请求。<ul><li>如果服务器允许跨域请求，响应头部会包含类似于<code>Access-Control-Allow-Origin: *</code>或<code>Access-Control-Allow-Methods: POST, GET, OPTIONS</code>的字段。</li><li>如果服务器不允许跨域请求，响应头部会不包含上述字段，或者返回错误码。</li></ul></li></ol><p>只有在服务器返回正确的响应头部信息后，浏览器才会根据服务器的允许策略决定是否继续发送真正的跨域请求。</p><h2 id="如何解决跨域问题："><a href="#如何解决跨域问题：" class="headerlink" title="如何解决跨域问题："></a>如何解决跨域问题：</h2><p>有两种思路：</p><ol><li>把域名、端口改为相同的。</li><li>让服务器告诉浏览器，允许跨域，也就是返回”Access-Control-Allow-Origin”响应头。</li></ol><h3 id="把域名、端口改为相同："><a href="#把域名、端口改为相同：" class="headerlink" title="把域名、端口改为相同："></a>把域名、端口改为相同：</h3><p>这是最直观的解决方案，上面解决twikoo跨域问题我有可能会用这个方案。</p><p>但是一般前后端分离项目，用的端口都会不同，这个时候就需要用到：用<strong>代理服务器</strong>来将请求转发到同一个域名下。</p><h4 id="什么是代理服务器："><a href="#什么是代理服务器：" class="headerlink" title="什么是代理服务器："></a>什么是代理服务器：</h4><p>代理服务器：是一种位于客户端和目标服务器之间的服务器，用于转发客户端的请求并将目标服务器的响应返回给客户端。通过配置代理服务器，可以在客户端和目标服务器之间建立中间层，从而解决跨域问题。</p><blockquote><p>代理服务器与服务器之间是非同源，但不存在跨域问题，是因为服务器之间采用的是http请求，而不是ajax技术。</p></blockquote><p><img src="C:\Users\周斌\AppData\Roaming\Typora\typora-user-images\image-20240123165649972.png" alt="image-20240123165649972"></p><h4 id="代理服务器解决跨域："><a href="#代理服务器解决跨域：" class="headerlink" title="代理服务器解决跨域："></a>代理服务器解决跨域：</h4><blockquote><p>本菜鸟主攻后端，如果前端部分说的有问题，欢迎指正。</p></blockquote><p>像主流的前端框架，像 Vue 和 React 都内置了代理，只需要修改配置即可，比较简单，用的比较多的还用Nginx服务器作为代理服务器转发请求。</p><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/132534931">10 种跨域解决方案（附终极方案） - 知乎 (zhihu.com)</a></p><p><strong>Vue框架：</strong></p><p>在<code>vue.config.js</code>文件中添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &#x27;/api&#x27;: &#123;</span><br><span class="line">        target: &#x27;http://example.com&#x27;, // 目标接口的域名</span><br><span class="line">        changeOrigin: true, // 是否改变源</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          &#x27;^/api&#x27;: &#x27;&#x27; // 路径重写</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置中使用了<code>proxy</code>选项，将请求路径以<code>/api</code>开头的请求代理到<code>http://example.com</code>。<code>changeOrigin</code>选项用于控制是否改变源，设置为<code>true</code>表示改变，<code>pathRewrite</code>用于路径重写，这里将<code>/api</code>去掉。</p><p><strong>React框架：</strong></p><blockquote><p>以下内容来自chatGPT:</p></blockquote><p>在 <code>package.json</code> 文件中添加一个 <code>proxy</code> 字段，指定代理的目标地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;your-react-app&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;proxy&quot;: &quot;http://example.com&quot;, // 代理目标地址</span><br><span class="line">  // 其他配置...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你需要更多的配置选项，可以创建一个 <code>setupProxy.js</code> 文件在项目根目录下（确保没有其他同名文件）。在这个文件中，你可以使用 <code>http-proxy-middleware</code> 库来进行更复杂的代理配置。首先，安装该库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install http-proxy-middleware --save</span><br></pre></td></tr></table></figure><p>创建 <code>setupProxy.js</code> 文件，并添加代理配置，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const &#123; createProxyMiddleware &#125; = require(&#x27;http-proxy-middleware&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = function(app) &#123;</span><br><span class="line">  app.use(</span><br><span class="line">    &#x27;/api&#x27;, // 请求路径以 /api 开头的将被代理</span><br><span class="line">    createProxyMiddleware(&#123;</span><br><span class="line">      target: &#x27;http://example.com&#x27;, // 代理目标地址</span><br><span class="line">      changeOrigin: true,</span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        &#x27;^/api&#x27;: &#x27;&#x27;, // 路径重写</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上述配置中，请求路径以 <code>/api</code> 开头的请求将被代理到 <code>http://example.com</code>，同时进行了一些配置，例如 <code>changeOrigin</code> 用于改变源，<code>pathRewrite</code> 用于路径重写。</p><p><strong>Nginx代理：</strong></p><blockquote><p>Nginx是一种高性能的开源Web服务器，同时也可以用作反向代理服务器。</p></blockquote><p>反向代理：指代理服务器接收客户端的请求，然后将请求转发给内部服务器，最后将内部服务器的响应返回给客户端。</p><p>通过nginx反向代理可以解决跨域问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name local.test;</span><br><span class="line">        location /api &#123;</span><br><span class="line">            proxy_pass http://localhost:8080;</span><br><span class="line">        &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://localhost:8000;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码解释如下：</p><ol><li><code>listen 80;</code>: 监听80端口，这是HTTP的默认端口。</li><li><code>server_name local.test;</code>: 配置Nginx监听的域名，这里是 <code>local.test</code>。当有请求到达这个域名时，Nginx将根据后续的 <code>location</code> 配置来处理请求。</li><li><code>location /api &#123; proxy_pass http://localhost:8080; &#125;</code>: 当请求的路径是 <code>/api</code> 时，Nginx会将请求代理到 <code>http://localhost:8080</code>，即将这个请求转发到本地的8080端口。</li><li><code>location / &#123; proxy_pass http://localhost:8000; &#125;</code>: 对于其他路径，Nginx会将请求代理到 <code>http://localhost:8000</code>，即将这个请求转发到本地的8000端口。</li></ol><p>在后端接口路径前面加上”/api”，前端调用该接口时，发送请求的域名和端口和浏览器一致，请求会由nginx进行代理转发到后端，就解决了跨域问题。</p><h3 id="服务器告诉浏览器允许跨域："><a href="#服务器告诉浏览器允许跨域：" class="headerlink" title="服务器告诉浏览器允许跨域："></a>服务器告诉浏览器允许跨域：</h3><p>这种方式的原理就是CORS技术（<strong>跨源资源共享</strong>），可以参考这篇文章：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">跨源资源共享（CORS） - HTTP | MDN (mozilla.org)</a></p><blockquote><p>CORS一种基于 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTTP">HTTP</a> 头的机制，该机制通过允许服务器标示除了它自己以外的其他<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Origin">源</a>（域、协议或端口），使得浏览器允许这些源访问加载自己的资源。</p></blockquote><p>前面说的”预检”也是该技术的一个机制。这个允许服务器除了它自己以外的其他源加载资源的标识就是：”Access-Control-Allow-Origin”请求头，也就是说给跨域请求加上”Access-Control-Allow-Origin”请求头并设置允许的源即可解决跨域问题。</p><h4 id="Springboot项目解决跨域问题的方式："><a href="#Springboot项目解决跨域问题的方式：" class="headerlink" title="Springboot项目解决跨域问题的方式："></a>Springboot项目解决跨域问题的方式：</h4><p>参考文章：<a href="https://juejin.cn/post/7229139006080253989">SpringBoot 项目解决跨域的几种方案 - 掘金 (juejin.cn)</a></p><h5 id="1-SpringBoot-配置-CORS-解决跨域："><a href="#1-SpringBoot-配置-CORS-解决跨域：" class="headerlink" title="1. SpringBoot 配置 CORS 解决跨域："></a>1. SpringBoot 配置 CORS 解决跨域：</h5><ol><li>在项目中创建一个新的配置文件</li><li>添加<code>@Configuration</code>注解实现<code>WebMvcConfigurer</code>接口</li><li>重写<code>addCorsMappings</code>方法并设置允许跨域的代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>) <span class="comment">// 所有接口</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>) <span class="comment">// 是否发送 Cookie</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>) <span class="comment">// 支持域</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>) <span class="comment">// 支持方法</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .exposedHeaders(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-SpringBoot-通过-CorsFilter-解决跨域"><a href="#2-SpringBoot-通过-CorsFilter-解决跨域" class="headerlink" title="2. SpringBoot 通过 CorsFilter 解决跨域:"></a>2. SpringBoot 通过 CorsFilter 解决跨域:</h5><p>和上面的方法原理相同，上面方法是通过配置类来实现CORS的，这种方式是通过拦截器来实现CORS的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCorsFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1.创建 CORS 配置对象</span></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">// 支持域</span></span><br><span class="line">        config.addAllowedOriginPattern(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 是否发送 Cookie</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 支持请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许的原始请求头部信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 暴露的头部信息</span></span><br><span class="line">        config.addExposedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.添加地址映射</span></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">corsConfigurationSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        corsConfigurationSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="comment">// 3.返回 CorsFilter 对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(corsConfigurationSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-使用-CrossOrigin注解解决跨域："><a href="#3-使用-CrossOrigin注解解决跨域：" class="headerlink" title="3. 使用@CrossOrigin注解解决跨域："></a>3. 使用<strong>@CrossOrigin</strong>注解解决跨域：</h5><p>可以在我们的控制器类或控制器方法上添加，添加在类上表示里面所有方法都可跨域，添加在方法上表示指定方法可以跨域。</p><p>@CrossOrigin中有2个参数：</p><ul><li><strong>origins</strong>： 允许可访问的域列表</li><li><strong>maxAge</strong>:准备响应前的缓存持续的最大时间（以秒为单位）。</li></ul><p>下面是最简单的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Nginx解决跨域："><a href="#使用Nginx解决跨域：" class="headerlink" title="使用Nginx解决跨域："></a>使用Nginx解决跨域：</h4><p>上面提到用nginx反向代理解决跨域，在nginx服务器进行代理时，也可以为请求加上 ‘Access-Control-Allow-Origin’ 请求头。只不过网上的配置有一点坑，很难找到适合的，鱼皮老哥当时解决了很久，这里直接贴鱼皮老哥的配置了：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span><span class="regexp"> ^~</span> /api/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080/api/;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="variable">$http_origin</span>;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="variable">$http_origin</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT,User-Agent,x-Requested-With,If-Modified-Since,Cache-Control,content-Type,Range&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="number">1728000</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Content-Length&#x27;</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>该块指定此配置适用于 URI 路径以 开头的请求。<code>location ^~ /api/``/api/</code></li><li><code>proxy_pass http://127.0.0.1:8080/api/;</code>用于将请求转发到指定的后端服务器（在本例中为）。<code>http://127.0.0.1:8080/api/</code></li><li><code>add_header &#39;Access-Control-Allow-Origin&#39; $http_origin;</code>将“Access-Control-Allow-Origin”标头设置为传入请求中的“Origin”标头的值，从而允许跨源请求。</li><li><code>add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;</code>指示凭据（如 cookie 和 HTTP 身份验证）应包含在跨域请求中。</li><li><code>add_header Access-Control-Allow-Methods &#39;GET, POST, OPTIONS&#39;;</code>指定跨域请求中允许的 HTTP 方法。</li><li><code>add_header Access-Control-Allow-Headers &#39;*&#39;;</code>允许跨域请求中的任何标头。</li><li>该块处理预检 OPTIONS 请求。它为 CORS 预检响应设置必要的标头，指示允许的方法、标头和其他与 CORS 相关的设置。<code>if ($request_method = &#39;OPTIONS&#39;)</code></li></ul><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>解决跨域问题有两大思路：1.将域名和端口修改一致；2.让服务器告诉浏览器，允许跨域，也就是返回”Access-Control-Allow-Origin”响应头。思路一可以手动改路径也可以使用代理转发请求，一般前端框架会自带代理，也可以使用nginx反向代理实现；思路二在springboot项目中可以定义配置类或者拦截器配置来设置请求头，也可以使用@CrossOrigin注解解决跨域，最后也可以使用nginx配置请求头解决跨域问题。</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>本文参考了以下文章并引用了部分内容，如有侵权，请联系本人（abin0926@qq.com）删除。</p><p><a href="https://juejin.cn/post/7229139006080253989">SpringBoot 项目解决跨域的几种方案 - 掘金 (juejin.cn)</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">跨源资源共享（CORS） - HTTP | MDN (mozilla.org)</a></p><p><a href="https://zhuanlan.zhihu.com/p/132534931">10 种跨域解决方案（附终极方案） - 知乎 (zhihu.com)</a></p><p>也参考了鱼皮老哥的视频内容，但是是星球内部视频，这里给老哥打个广告吧，以示感谢：</p><p><a href="https://www.code-nav.cn/">主页 - 编程导航 (code-nav.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我想逃离这片原本温暖的港湾</title>
      <link href="/2024/01/22/flee/"/>
      <url>/2024/01/22/flee/</url>
      
        <content type="html"><![CDATA[<p>不知道从什么时候开始，家变得不再温馨，家人的各种询问、催促、不理解甚至让人想要逃离。什么时候开始变得呢？我开始回忆：</p><p>我家在一个算不上很偏远的农村，周围是黑压压的大山，似乎村里的人永远也走不出去。父母拼尽大半辈子的力气在村里修了一座楼房，事实证明，这座房子确实花光他们的精力与积蓄，以至于到现在十年了还是毛胚房，内部没有一点装修。小时候受课本和教育影响，觉得当个农民在农村自给自足也还不错。</p><p>可是啊，“谁让我读了那么多的书，知道了双水村以外还有个更大的世界”，看过了外面世界的繁华，也渐渐懂得了现实的残酷，我明白了我呆着的农村就是落后与穷。村里的人似乎在我家房子修好两三年里也都明白了这个道理，纷纷搬进了城里，有人做起了小生意，也有人依然在外打工养着城里那套房子，不过现在看，他们似乎过得都还不错。父母开始懊恼当初的抉择，可是也于事无补，于是寄希望于我，希望带他们走出这层层的大山。</p><p>我也渐渐明白了自己肩上的责任，我也以带父母走出大山作为自己的目标，我以为考上了大学就会离这个目标越来越近，却越来越发现这个目标离我遥不可及。我看到了经济的下滑，我看到了上涨的房价，我看到了工作的难找，我也看到了挣钱的不易…我想着自己未来的生活，自己的一车一房就已经需要用大半辈子去努力了，又何谈带父母走出大山呢？</p><p>看着逐渐衰老的父母，他们的头发已经花白，身子也已经不在笔直，视力和听力也大不如从前。我想他们也打不了几年的工了，我得为他们想想后路，但是我也确实想不到他们除了打工还能干什么。思来想去，劝他们去考个驾照，就算以后不拉客，出门也方便，可是他们说自己老了考不动了，可是明明他们也才五十多岁啊！终于在我坚持劝了一年后，父亲决定先试试，于是下载了驾考宝典，每天晚上看看，可是一年过去了，最高分也只有八十分，父亲也几度想放弃。</p><p>我也有一些动摇了，可是每次回家时，我要苦等几个小时的顺风车，等不等得到还得看运气；回到家想去县城办点事，又得等很久的车；想去找好朋友玩可是没有直接的交通工具所以放弃…这些时候我就会想如果家里有辆车多好，又想到老父亲的状态，心里只是深深的无力感。</p><p>秋招中摸爬滚打了几个月，终于找到一份月薪一万的工作，父母很开心，觉得我的工作稳定了，可是只有我知道这个全网无好评的外包公司，试用期六个月的风险有多大。于是我想春招继续找，我把想法告诉了父母，当我说出违约金五千，他们沉默了很久，然后告诉我：一个月一万已经很不错了。我当然明白他们的意思，他们不希望，可是我不理解，为什么我诠释了那么久的利弊，他们到最后也只关心月薪和违约金呢？</p><p>想不到之前觉得遥远甚至荒诞的催婚居然降临到了我这个校门都没踏出的小伙子身上，我也不清楚爷爷为什么突然这么着急，但是我清楚现在的我等于没车没房没存款没工作，怎么可能有女孩子愿意跟我谈婚论嫁？更有点难过的是，我到现在都没谈过几段正经的恋爱。不过，“两袖清风怎敢误佳人”？</p><p>我是有点自卑的，可能是经历了这件事之后开始的：几年前我的姐姐和她谈了四年的男朋友准备订婚了，他的男朋友是浙江人，在到日子的前一天，男方的父母刚走到我们县城，甚至都没到我们村里，就因为受不了这边的落后直接反悔回家了，那是四年的感情啊。我害怕了，我怕多年的感情会被家庭条件打破，之前有谈过一段恋爱，在家我甚至不敢开视频，因为我怕家里的毛胚墙面会吓到女孩子。当时我将恋爱的消息告诉了父母，父母很高兴说要给我涨生活费，于是我从一个月一千五百块的生活费涨到了一个月一千六百块，因为是异地，这点生活费甚至不够我去见她一面，见不了面的感情真的挺难维系的，于是这段感情也无疾而终了。</p><p>我该怎么将这些事告诉爷爷呢？就算告诉他又有什么用呢？除了加深他的愧疚感外没有其他任何意义，于是我只能在他的催促下说到：您先别急，我会加紧找的。</p><p>我总感觉父母闲不下来，而且他们也不想让我闲下来，总会找些莫名其妙的事情让我做，有时候他们两个人可以轻松做完的事非要给我分一些做，可是卧也不是没事做啊，我决定春招再找找工作，现在正在完善两个项目，可是他们不懂啊，我说我有事，他们会觉得这是借口。</p><p>我终于想明白了，原来是因为我成年了，当一个人成年后，家就不再是温暖的港湾了，而是一种不得不承担的责任，压得我好想逃，逃离这片不再温暖的港湾。</p>]]></content>
      
      
      <categories>
          
          <category> 胡思乱想 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>爱上小树枝</title>
      <link href="/2024/01/16/lovexsz1314/"/>
      <url>/2024/01/16/lovexsz1314/</url>
      
        <content type="html"><![CDATA[<p>从前，在一块刚刚荒废的田里，有一根小小的嫩芽冒出了头，很小很小，似乎一阵风就可以将她吹走，她浑身碧绿，像一块刚被细细打磨过的翡翠。她的周围有几棵稍微强壮的树苗，每当风雨到来，她可以躲在树苗下，他们也愿意为她遮风挡雨，看得出来，他们很照顾她。</p><p>不远但又很远的地方，有一个不大不小的石块。他的周围光秃秃的，他很无聊也很孤独，他每天唯一的乐趣就是看着这块地里一个又一个嫩芽冒出头，然后慢慢长高。所以，那天小嫩芽刚冒头，小石块就注意到了她，“哇，又多了一颗芽”“奇怪，她怎么能这么绿呢？”“这个小芽还挺好看的”，小石块想着。</p><p>小石块做了一个梦，梦见那棵小嫩芽挥舞着她仅有的一片叶子，冲他喊：“喂！过来玩！”，他睁开眼，发现那好像不是梦，那棵嫩芽冲他挥舞着她的叶子，喊到：“喂！那块憨憨的石头，你能过来吗？”小石块有点懵，他认为自己永远不会被注意到，他很开心，他努力的想向小嫩芽那边挪动一点，但是他做不到。</p><p>“我做不到，我移动不了，”小石块失望的回答，“但是再被太阳晒一段时间，风就会带着很多我分出的小碎渣过来。”</p><p>“我知道，你的那些碎渣最后会变成我们的肥料呢，谢谢你呀”，小嫩芽继续说，“看你孤零零的，我们做朋友吧。”</p><p>“好啊好啊，等我再小点，就能被风带着慢慢向你那边挪动，但是会很慢很慢。”</p><p>“小问题啦，慢慢来，能前进就行，我等你啊。”</p><p>从那以后，小石块再不关心有没有新芽长出来，也不再关注其他树苗长了多高，他的心里只有快点被风化，让自己可以早点去到小嫩芽身边。</p><p>小石块珍惜着每一次暴晒，每一次刮风，每一场大雨。太阳的炙烤让他表面变得酥脆，大风的袭挂带走他表面没法附着的表皮，雨水的冲刷让剩下的那些顽固颗粒掉落，过程让小石块很痛苦，但是小石块心里是开心的，尤其是看着自己风化的小颗粒被风带到小嫩芽根部的时候，小嫩芽也会挥舞着越来越多的叶子，摇曳着身子向小石头致谢。</p><p>终于，小石块变得足够小，每次吹往小嫩芽那边的大风可以将她挪动一点点，看着自己离小嫩芽越来越近，小石块很开心，小嫩芽也会为他加油。</p><p>那天的风特别大，可是那风却是逆着小石块前进的方向吹的，小石块被吹了回去，甚至比他开始距离小嫩芽的距离更远。小石块绝望了，那几根树苗也开始对小石块冷嘲热讽，小嫩芽也有些伤心，但是她还是鼓励小石块继续努力。</p><p>小石块重新开始了他的行程，这次他前进一点就努力将自己嵌入土中，等待下一次朝向小嫩芽的风吹来，再将自己展露出来。<br>一天一天，小嫩芽也渐渐长成了小树苗，她浑身依然碧绿，小石块离小树苗的距离也越来越近。</p><p>一场暴雨圆了小石块的梦，雨水将小石块前面的一点地冲陷，小石块也顺势向下滚去。暴雨停止，小石块已经到了小树苗的身边。<br>小树苗很开心，小石块更开心。他们每天能从早上聊到晚上，小石块也会趁着每次下雨将自己的表面的腐渣送向小树苗，给小树苗当肥料。</p><p>一天，小树苗问小石块，“你知道这块田外面是什么样子吗？”，小石块回答：“不知道啊，我一出生就在这田里，我也不在乎外面的世界怎样，在你身边就够了。”小石块自以为自己的回答很不错，小树苗却是眉头一皱，小声说道：“可是我很想看看外面的世界。”小石头立马改口说：“那未来有机会我们一起去看看！”虽然小树苗和小石块都知道这不可能实现，但是小树苗还是高兴的回答说：“等我长了枝，你到我身上来，我带你看外面的世界！”</p><p>日子一天一天过去，小树苗成了众多小树枝中的一枝，越来越高，小石块在每日的风化下成了小石子，他们每天的生活似乎没有变化，但是小石子没有注意到的是，他们的距离随着小树枝的变高再慢慢变远，小树枝周围的树苗也渐渐对小石子有了不满，认为他抢走了他们的小树枝。</p><p>一天，一个小男孩来到了田里，他们拨弄着小树枝周围的树苗，其中一根树苗借着男孩的拨弄将小石子弹开，小石子大喊：“哦不！”更不幸的是，小男孩将小石子捡起，然后当做飞镖扔了出去，小石子绝望的看向小树枝，小树枝有点悲伤但是小石子能感受到，小树枝这次的情绪波动甚至没有那次自己被大风吹走时大，不幸中的万幸，小男孩的力气不算大，小石子没有被扔出这片田里。<br>小石子对着小树枝大喊：“等我！我会再次去到你身边的。”小树枝却是摇了摇头，说道：“不要再折磨你自己了，你应该有你自己的生活。”小石子呆住了，他难过，绝望，悔恨…</p><p>小石子一夜未眠，第二天早上，小树枝的一片叶子被风带了过来，上面写着：小石子，谢谢你。和你在一起的时光很快乐，我知道你对我很好，我也相信你有能力再次回来，但是或许我们从一开始就不是一路人。我真的很想去看看这片天地外的世界，我需要努力长高，可是你没有办法跟随我一起，我也不希望你以我的目标为目标，你应该有自己的生活，我也不想你再未来回来而受尽折磨。对不起，耽误了你那么长时间，愿安。</p><p>小石子怔怔地望着小树枝，树枝随风招摇 依然美好…</p>]]></content>
      
      
      <categories>
          
          <category> 故事 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Springboot集成log4j，并基于disruptor实现异步日志</title>
      <link href="/2023/08/16/disruptor/"/>
      <url>/2023/08/16/disruptor/</url>
      
        <content type="html"><![CDATA[<p>Java日志框架挺多的，log4j、slf4j、logback…logback与log4j的作者是同一个人，而logback实际上是log4j的改进版，SpringBoot内置了logback，而logback天然又支持slf4，所以我们在使用Springboot开发时，可能不知不觉就使用了logback+slf4j的框架，这两个框架不需要另外去集成，所以这篇文章就讲讲springboot集成log4j。</p><h2 id="Springboot集成log4j："><a href="#Springboot集成log4j：" class="headerlink" title="Springboot集成log4j："></a>Springboot集成log4j：</h2><p>还是那“三板斧”：引依赖，写自定义配置，写配置文件。</p><h3 id="1-引依赖："><a href="#1-引依赖：" class="headerlink" title="1. 引依赖："></a>1. 引依赖：</h3><p>在springboot项目中先引入下面这个依赖，这里先埋个坑，后面再说：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.1</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-log4j-spring-xml里自定义配置："><a href="#2-log4j-spring-xml里自定义配置：" class="headerlink" title="2. log4j-spring.xml里自定义配置："></a>2. log4j-spring.xml里自定义配置：</h3><p>其实文件名可以自己起，但是SpringBoot 官方推荐优先使用带有<code>-spring</code>的文件名作为你的日志配置，所以一般起名为：log4j-spring.xml，这些内容也可以在yml文件里配置，但是xml文件里内容也需要认识嘛，下面给一份比较完整的文件模板，复制就能使用那种，后续想自己配置功能修改即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">&quot;INFO&quot;</span> <span class="attr">monitorInterval</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--变量配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- %logger&#123;36&#125; 表示 Logger 名字最长36个字符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%date&#123;HH:mm:ss.SSS&#125; %X&#123;PFTID&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义日志存储的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_PATH&quot;</span> <span class="attr">value</span>=<span class="string">&quot;../log&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_NAME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;frame.log&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--https://logging.apache.org/log4j/2.x/manual/appenders.html--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--输出日志的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;LOG_PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">&quot;fileLog&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;FILE_PATH&#125;/temp.log&quot;</span> <span class="attr">append</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;LOG_PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;RollingFileInfo&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;FILE_PATH&#125;/info.log&quot;</span> <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;FILE_PATH&#125;/$&#123;FILE_NAME&#125;-INFO-%d&#123;yyyy-MM-dd&#125;_%i.log.gz&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;LOG_PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;10MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;15&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个会打印出所有的warn及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;RollingFileWarn&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;FILE_PATH&#125;/warn.log&quot;</span> <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;FILE_PATH&#125;/$&#123;FILE_NAME&#125;-WARN-%d&#123;yyyy-MM-dd&#125;_%i.log.gz&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;warn&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;LOG_PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;10MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;15&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个会打印出所有的error及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;RollingFileError&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;FILE_PATH&#125;/error.log&quot;</span> <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;FILE_PATH&#125;/$&#123;FILE_NAME&#125;-ERROR-%d&#123;yyyy-MM-dd&#125;_%i.log.gz&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;LOG_PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;10MB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;15&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;logger name=&quot;org.mybatis&quot; level=&quot;info&quot; additivity=&quot;false&quot;&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;AppenderRef ref=&quot;Console&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;/logger&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--监控系统信息--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--若是additivity设为false，则子Logger只会在自己的appender里输出，而不会在父Logger的appender里输出。--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;Logger name=&quot;org.springframework&quot; level=&quot;info&quot; additivity=&quot;false&quot;&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;AppenderRef ref=&quot;Console&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;/Logger&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--                &lt;AsyncLogger name=&quot;asyncLog&quot; level=&quot;info&quot; additivity=&quot;true&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    &lt;appender-ref ref=&quot;RollingFileInfo&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    &lt;appender-ref ref=&quot;Console&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;/AsyncLogger&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--                &lt;AsyncRoot level=&quot;info&quot; includeLocation=&quot;true&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    &lt;AppenderRef ref=&quot;RollingFileInfo&quot; /&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    &lt;AppenderRef ref=&quot;Console&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;/AsyncRoot&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFileInfo&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFileWarn&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFileError&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;fileLog&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这份文件里面注释解释的也比较清楚，很多配置在需要的时候将注释符去掉就可以了，这里就不去过多解释了，想具体了解的，可以去看看这篇文章：<a href="https://zhuanlan.zhihu.com/p/555185411">SpringBoot使用logback日志框架超详细教程 - 知乎 (zhihu.com)</a>虽然这篇文章讲的是logback框架，但是xml文件中的配置和log4j几乎一模一样，可以借鉴。</p><h3 id="3-在配置文件中指定-xml路径"><a href="#3-在配置文件中指定-xml路径" class="headerlink" title="3. 在配置文件中指定.xml路径:"></a>3. 在配置文件中指定.xml路径:</h3><p>写完xml文件，还需要在yml配置文件里指定一下log框架的配置文件路径，也就是xml文件路径，加上这一句就i行了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  config: classpath:log4j-spring.xml</span><br></pre></td></tr></table></figure><h2 id="填前面的坑（解决依赖冲突方法）："><a href="#填前面的坑（解决依赖冲突方法）：" class="headerlink" title="填前面的坑（解决依赖冲突方法）："></a>填前面的坑（解决依赖冲突方法）：</h2><p>这时候启动项目，你会发现项目压根启动不了，报错啦哈哈，差不多会报下面的错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SLF4J: Class path contains multiple SLF4J providers.</span><br><span class="line">SLF4J: Found provider [ch.qos.logback.classic.spi.LogbackServiceProvider@4e41089d]</span><br><span class="line">SLF4J: Found provider [org.apache.logging.slf4j.SLF4JServiceProvider@32a068d1]</span><br><span class="line">SLF4J: See https://www.slf4j.org/codes.html#multiple_bindings for an explanation.</span><br><span class="line">SLF4J: Actual provider is of type [ch.qos.logback.classic.spi.LogbackServiceProvider@4e41089d]</span><br></pre></td></tr></table></figure><p>我在做项目时的报错信息和这个demo里的报错信息不太一样，但是看到”SLF4J”，解决方式都时一样的，出现报错的原因就是前面说过，springBoot内置了日志框架，实现了slf4j，slf4j与log4j冲突了：</p><p><img src="C:\Users\周斌\AppData\Roaming\Typora\typora-user-images\image-20230812203858054.png" alt="image-20230812203858054"></p><p>其实埋这个坑的原因是为了介绍一下解决依赖冲突的方法，这里推荐一个插件：Maven Helper</p><p><img src="C:\Users\周斌\AppData\Roaming\Typora\typora-user-images\image-20230812204054629.png" alt="image-20230812204054629"></p><p>安装了这个插件，在进入pom文件时就会有下面这个”Dependency Analyzer”按钮：<br><img src="https://cdn.jsdelivr.net/gh/twigIcer/markdown-img@main/imgs/image-20240124150632768.png" alt="image-20240124150632768"></p><p>点击这个按钮，就会进入到上面第一张图中的界面，里面将各个依赖的关系罗列的很清楚，像出现了log方面的依赖冲突，就可以直接在搜索框搜索”log“，就可以看到在上面第一张图中关于log的依赖都被标识出来了，可以看到，除了log4j依赖外，spring-boot-starter-web里有内置的spring-boot-starter-logging依赖，这个时候我们既可以右键spring-boot-starter-logging，点击”Exclude“，插件就自动帮我们把spring-boot-starter-web中的log依赖排除了，很方便。</p><p>个人觉得学会排除重复依赖的方法还是满重要的，所以不要怪我前面埋坑喽。</p><p>这个时候刷新maven，启动项目，看到之前彩色的日志全部变成白色的就说明log4j整合完成了。</p><h2 id="基于disruptor实现异步日志："><a href="#基于disruptor实现异步日志：" class="headerlink" title="基于disruptor实现异步日志："></a>基于disruptor实现异步日志：</h2><p>其实前面的内容都是铺垫，我最想记录就是这一点，在大项目中，或许每秒都有很多条日志写入文件中，如果不使用异步日志的话，就会导致进程阻塞。</p><blockquote><p>在多线程服务程序中，异步日志是必须的，因为如果在网络IO线程或业务线程中直接往磁盘写数据的话，写操作偶尔可能阻塞长达数秒之久。这可能导致请求方超时，活着耽误发送心跳消息，在分布式系统中更可能造成多米诺骨牌效应，例如误报死锁引发自动failover等。</p></blockquote><h3 id="disruptor简介："><a href="#disruptor简介：" class="headerlink" title="disruptor简介："></a>disruptor简介：</h3><p>Disruptor是一个高性能的异步处理框架，它可以帮助我们轻松构建数据流处理。Disruptor的核心思想是使用环形队列来存储事件，然后通过消费者线程来消费这些事件。这种方式可以避免锁和同步器，从而提高性能。</p><h3 id="1-引依赖：-1"><a href="#1-引依赖：-1" class="headerlink" title="1. 引依赖："></a>1. 引依赖：</h3><p>使用disruptor需要引入下面的依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.lmax&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;disruptor&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.4</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-修改xml配置文件："><a href="#2-修改xml配置文件：" class="headerlink" title="2. 修改xml配置文件："></a>2. 修改xml配置文件：</h3><p>使用异步日志，需要将xml文件里的配置修改一下，主要就是将<AsyncLogger>这块注释去了，将<root>注释掉：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">AsyncLogger</span> <span class="attr">name</span>=<span class="string">&quot;asyncLog&quot;</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFileInfo&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">AsyncLogger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">AsyncRoot</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> <span class="attr">includeLocation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFileInfo&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">AsyncRoot</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &lt;root level=&quot;info&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;appender-ref ref=&quot;Console&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;appender-ref ref=&quot;RollingFileInfo&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;appender-ref ref=&quot;RollingFileWarn&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;appender-ref ref=&quot;RollingFileError&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;appender-ref ref=&quot;fileLog&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/root&gt;--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-在启动类上加配置："><a href="#3-在启动类上加配置：" class="headerlink" title="3. 在启动类上加配置："></a>3. 在启动类上加配置：</h3><p>使用异步日志还需要再启动类上加上这一句固定配置”System.setProperty(“Log4jContextSelector”, “org.apache.logging.log4j.core.async.AsyncLoggerContextSelector”);”：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log4jTestApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;Log4jContextSelector&quot;</span>, <span class="string">&quot;org.apache.logging.log4j.core.async.AsyncLoggerContextSelector&quot;</span>);</span><br><span class="line">        SpringApplication.run(Log4jTestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试异步日志："><a href="#测试异步日志：" class="headerlink" title="测试异步日志："></a>测试异步日志：</h2><p>简单写一个测试类，向文件中写入10000条日志，测试对比一下使用异步日志和不使用的效率：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testLog&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLog</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">          log.info(<span class="string">&quot;这是&#123;&#125;条日志！&quot;</span>, i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">      log.info(<span class="string">&quot;当前耗时：&#123;&#125;&quot;</span>, endTime - startTime);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>未使用异步日志，耗时2907ms，使用异步日志，耗时158ms，可以看到效率提升还是满明显的。</p><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p>在springboot项目中整合log4j需要注意排除springboot内置日志框架，使用disruptor异步日志可以大幅提升日志记录性能。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Springboot3.x整合Swagger</title>
      <link href="/2023/08/12/swagger/"/>
      <url>/2023/08/12/swagger/</url>
      
        <content type="html"><![CDATA[<p>最近做了个小调查，问了我周围的Java伙伴们他们的spring和springboot的版本，发现居然没人用最新的spring6.x和springboot3.x，想想也正常，毕竟程序员们都听过“用旧不用新”的忠告，不过呢，我个人是比较喜欢探索新事物的，所以在spring6.x和springboot3.x刚出来不久就开始使用了，也因此吃了很多版本不兼容的亏，我的博客里就记录了好几次，这不今天又喜提一个——Springboot3.x整合Swagger。</p><h2 id="Swagger简介："><a href="#Swagger简介：" class="headerlink" title="Swagger简介："></a>Swagger简介：</h2><p>Swagger 是一个规范和工具集，用于设计、构建、文档化和使用 RESTful 风格的 Web 服务。它提供了一套简洁易用的接口描述语言（OpenAPI Specification）和交互式文档、代码生成器、测试工具等。</p><p>以下是 Swagger 的一些主要特点和优势：</p><ol><li>接口描述语言（OpenAPI Specification）: Swagger 使用基于 JSON 或 YAML 的接口描述语言来定义 API 的结构、参数、返回值等信息。这样可以使开发人员更好地理解和使用接口，提高开发效率。</li><li>交互式文档：Swagger 自动生成交互式的 API 文档，通过 Web 界面提供了一种直观的方式来查看和测试 API。它包含了所有接口的详细说明、参数验证规则、示例请求和响应等信息，可以方便开发人员和其他团队成员快速了解和使用 API。</li><li>代码生成器：Swagger 可以根据接口描述文件自动生成客户端代码，支持多种语言和框架，包括 Java、Python、JavaScript、Go 等。这样可以加速客户端的开发过程，并保持与服务端的接口定义一致性。</li><li>API 测试工具：Swagger 提供了一个内置的 API 测试工具，可以直接在文档页面上对 API 进行测试。开发人员可以通过该工具发送请求，并查看请求和响应的详细信息，从而快速验证 API 的正确性和稳定性。</li><li>生态系统丰富：Swagger 拥有一个庞大的开源社区和丰富的生态系统，提供了许多与 Swagger 兼容的工具和插件。这些工具可以与各种开发框架和平台集成，为开发人员提供更多的选择和便利。</li></ol><p>简单来说，Swagger就是一个接口测试工具，与PostMan、APIpost类似，不过由于Swagger具有代码侵入性，所以其实是不建议用的，不过在卷到飞起的今天，该掌握还是得掌握的。</p><h2 id="编写一个简单的测试接口："><a href="#编写一个简单的测试接口：" class="headerlink" title="编写一个简单的测试接口："></a>编写一个简单的测试接口：</h2><p>首先编写一个测试接口，这里就写了个很简单的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Springboot2-x整合Swagger："><a href="#Springboot2-x整合Swagger：" class="headerlink" title="Springboot2.x整合Swagger："></a>Springboot2.x整合Swagger：</h2><p>我最开始用的是Springboot2.x整合Swagger的方式，结果由于版本不兼容出现了一些问题，但是方法是对的，也就记录一下吧。</p><p>其实Java整合各种组件的基本流程就是：引依赖-&gt;写配置类-&gt;在配置文件里开启，那就从头开始说说吧。</p><h3 id="1-引依赖："><a href="#1-引依赖：" class="headerlink" title="1. 引依赖："></a>1. 引依赖：</h3><p>Swagger需要的依赖就下面两个，一个是UI界面依赖，一个核心依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;<span class="number">2.7</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;<span class="number">2.7</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-写配置类："><a href="#2-写配置类：" class="headerlink" title="2. 写配置类："></a>2. 写配置类：</h3><p>新建一个SwaggerConfig的类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">api</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.bin.swaggerdemo.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;接口文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 api() 方法中，我们通过 `select() 方法配置扫描的包路径，paths() 方法配置接口的访问路径，apiInfo() 方法配置接口文档的相关信息，@Configuration 表示该类是一个配置类，@EnableSwagger2 表示启用 Swagger。</p><h3 id="3-写配置文件："><a href="#3-写配置文件：" class="headerlink" title="3. 写配置文件："></a>3. 写配置文件：</h3><p>Springboot2.x整合Swagger,如果不需要自定义配置上面的title、description、version这些内容，就不需要在配置文件里写什么。</p><h2 id="版本不兼容导致的问题："><a href="#版本不兼容导致的问题：" class="headerlink" title="版本不兼容导致的问题："></a>版本不兼容导致的问题：</h2><h3 id="1-问题描述："><a href="#1-问题描述：" class="headerlink" title="1. 问题描述："></a>1. 问题描述：</h3><p>如果是Springboot2.x到这就已经整合好了，可惜我用的是Springboot3.x，然后就报错啦。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.NoClassDefFoundError: org/springframework/util/comparator/InvertibleComparator</span><br><span class="line">at org.springframework.plugin.core.OrderAwarePluginRegistry.&lt;clinit&gt;(OrderAwarePluginRegistry.java:<span class="number">45</span>) ~[spring-plugin-core-<span class="number">1.2</span><span class="number">.0</span>.RELEASE.jar:na]</span><br><span class="line">at org.springframework.plugin.core.support.PluginRegistryFactoryBean.getObject(PluginRegistryFactoryBean.java:<span class="number">36</span>) ~[spring-plugin-core-<span class="number">1.2</span><span class="number">.0</span>.RELEASE.jar:na]</span><br><span class="line">at org.springframework.plugin.core.support.PluginRegistryFactoryBean.getObject(PluginRegistryFactoryBean.java:<span class="number">28</span>) ~[spring-plugin-core-<span class="number">1.2</span><span class="number">.0</span>.RELEASE.jar:na]</span><br><span class="line">at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:<span class="number">148</span>) ~[spring-beans-<span class="number">6.0</span><span class="number">.11</span>.jar:<span class="number">6.0</span><span class="number">.11</span>]</span><br><span class="line">... <span class="number">71</span> common frames omitted</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.springframework.util.comparator.InvertibleComparator</span><br><span class="line">at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:<span class="number">641</span>) ~[na:na]</span><br><span class="line">at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:<span class="number">188</span>) ~[na:na]</span><br><span class="line">at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">521</span>) ~[na:na]</span><br><span class="line">... <span class="number">75</span> common frames omitted</span><br></pre></td></tr></table></figure><p>这日志就不解读了（其实我也看不太懂，咳咳），不过百度了一下，也没找到好的解决方案。</p><h3 id="2-探究过程："><a href="#2-探究过程：" class="headerlink" title="2. 探究过程："></a>2. 探究过程：</h3><p>检查了接口代码、配置类代码确保没问题，我就想到可能因为依赖的版本低不兼容了，其实我在mvn仓库引依赖时就发现springfox-swagger2这依赖2020年后就不更新了，我居然天真的认为是技术已经很成熟了，然后傻乎乎的引入了上面最新的3.0版本的依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;<span class="number">3.0</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;<span class="number">3.0</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>还是报错，不过这次的报错信息短了很多：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.ClassNotFoundException: javax.servlet.http.HttpServletRequest</span><br><span class="line">at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:<span class="number">641</span>) ~[na:na]</span><br><span class="line">at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:<span class="number">188</span>) ~[na:na]</span><br><span class="line">at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">521</span>) ~[na:na]</span><br><span class="line">at java.base/java.lang.Class.forName0(Native Method) ~[na:na]</span><br><span class="line">at java.base/java.lang.Class.forName(Class.java:<span class="number">496</span>) ~[na:na]</span><br><span class="line">at java.base/java.lang.Class.forName(Class.java:<span class="number">475</span>) ~[na:na]</span><br><span class="line">at java.base/sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:<span class="number">114</span>) ~[na:na]</span><br><span class="line">... <span class="number">32</span> common frames omitted</span><br></pre></td></tr></table></figure><p>其实经验告诉我，每次报错信息中有“~[spring-boot-3.1.2.jar:3.1.2]”这种，差不多就是spring/springboot版本不兼容导致的问题，然后喝了杯水冷静了一下，搜索了“springboot3整合Swagger”，得到了答案。</p><h2 id="springboot3整合Swagger："><a href="#springboot3整合Swagger：" class="headerlink" title="springboot3整合Swagger："></a>springboot3整合Swagger：</h2><p>还是那几步。</p><h3 id="1-引依赖：-1"><a href="#1-引依赖：-1" class="headerlink" title="1. 引依赖："></a>1. 引依赖：</h3><p>因为集成SpringFox只支持SpringBoot2.x，而基于Swagger的SpringDoc的社区现在十分活跃，版本不断更新。SpringFox自从2020年7月14号之后就不更新了，官方建议是springdoc替代springfox。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springdoc&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;<span class="number">2.0</span><span class="number">.4</span>&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;!-- 官方建议是springdoc替代springfox--&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springdoc&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;springdoc-openapi-starter-webmvc-api&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;<span class="number">2.0</span><span class="number">.4</span>&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="2-写配置类：-1"><a href="#2-写配置类：-1" class="headerlink" title="2. 写配置类："></a>2. 写配置类：</h3><p>SpringDoc的配置类比上面springfox的配置类简单些：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">springShopOpenAPI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">                .info(<span class="keyword">new</span> <span class="title class_">Info</span>().title(<span class="string">&quot;Swagger&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;abin&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;v1&quot;</span>)</span><br><span class="line">                        .license(<span class="keyword">new</span> <span class="title class_">License</span>().name(<span class="string">&quot;Apache 2.0&quot;</span>).url(<span class="string">&quot;http://springdoc.org&quot;</span>)))</span><br><span class="line">                .externalDocs(<span class="keyword">new</span> <span class="title class_">ExternalDocumentation</span>()</span><br><span class="line">                        .description(<span class="string">&quot;外部文档&quot;</span>)</span><br><span class="line">                        .url(<span class="string">&quot;https://springshop.wiki.github.org/docs&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也还是配置了上面的哪些信息，springdoc里不需要@EnableSwagger2注解。</p><h3 id="3-写配置文件：-1"><a href="#3-写配置文件：-1" class="headerlink" title="3. 写配置文件："></a>3. 写配置文件：</h3><p>使用springdoc需要在配置文件里指定swagger的ui界面访问路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">springdoc:</span><br><span class="line">  swagger-ui:</span><br><span class="line">    path: /swagger-ui.html</span><br></pre></td></tr></table></figure><h3 id="4-启动项目测试："><a href="#4-启动项目测试：" class="headerlink" title="4. 启动项目测试："></a>4. 启动项目测试：</h3><p>启动项目，没有报错，浏览器访问<a href="http://localhost:8080/swagger-ui/index.html#/，出现Swagger接口测试界面：">http://localhost:8080/swagger-ui/index.html#/，出现Swagger接口测试界面：</a></p><p><img src="https://cdn.jsdelivr.net/gh/twigIcer/markdown-img@main/imgs/image-20230811094036252.png" alt="image-20230811094036252"></p><p>选择我们创建好的test/get接口，点击“try it out”进行测试，响应200，表示请求成功，到此swagger整合完成。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>本文只是简单介绍了Springboot整合swagger的方式，Swagger还有一些高级应用，可以阅读官方文档了解，springboot2.x与springboot3.x中很多组件的整合方式都不同，需要整合时，先看看官方文档，可以少走很多弯路。最后，你们的spring/springboot是什么版本呢？</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>怎么分析设计高并发红包雨系统？</title>
      <link href="/2023/07/20/hongbaoyu/"/>
      <url>/2023/07/20/hongbaoyu/</url>
      
        <content type="html"><![CDATA[<p>这个问题在一个月前的Lazada面试中遇到过，但是当时胡说八道了一通，也没说到点上，今天逛B站时，发现尚硅谷前两天刚发布了“红包雨系统架构设计”的直播课，课程质量很高，也让我一个月前没理清的思路清晰了很多。</p><p>直播课的讲解路线为：单机-集群-云部署-前后端分离调用，那本文也就按这个顺序记录一下。</p><h2 id="单机模式下需要考虑的问题："><a href="#单机模式下需要考虑的问题：" class="headerlink" title="单机模式下需要考虑的问题："></a><strong>单机模式下需要考虑的问题：</strong></h2><h3 id="1-用什么数据结构安装并记录本次发送的红包？"><a href="#1-用什么数据结构安装并记录本次发送的红包？" class="headerlink" title="1.用什么数据结构安装并记录本次发送的红包？"></a><strong>1.用什么数据结构安装并记录本次发送的红包？</strong></h3><p>比如我们要发100块，分10个包发，该用什么数据结构来记录呢？首先基于高并发下的性能考虑，肯定是使用redis来存储数据，至于用什么数据结构，老师阳哥说的是使用list结构，在发红包时用lpush存，在抢红包时用lpop取。我看见弹幕有人说无序应该用set，当时我觉得还挺有道理的，阳哥应该没看见这弹幕，所以也没说，但是后面我仔细考虑了一下，set它不能重复啊，但是红包的金额是可以重复的，所以用set显然不合适。</p><h3 id="2-大家抢到的红包金额差距不能过大，拆分红包使用什么算法？"><a href="#2-大家抢到的红包金额差距不能过大，拆分红包使用什么算法？" class="headerlink" title="2.大家抢到的红包金额差距不能过大，拆分红包使用什么算法？"></a><strong>2.大家抢到的红包金额差距不能过大，拆分红包使用什么算法？</strong></h3><p>如果抢红包活动中，100块发5个包，其中一个包96，剩余四个各1块，这样的红包分配显然是不合理的，所以得采用算法来控制红包金额的拆分范围，阳哥讲了一种在红包业务中比较通用的算法：二倍均值算法。</p><p>二倍均值算法：</p><p>假设M为总金额，N为抢红包人数，那么根据二倍均值法，每次抢到的金额 = 随机区间 （0， M / N X 2）</p><p>这个公式可以确保每个人获取的金额的平均值是相等的，不会受到先后顺序不同的影响。</p><blockquote><p>比如说，有一个金额为100块的红包，10人分，那么：<br>100/10X2 = 20, 所以第一个人的随机范围是（0，20 )，平均可以抢到10元。<br>假设第一个人随机到10元，那么剩余金额是100-10 = 90 元。<br>90/9X2 = 20, 所以第二个人的随机范围同样是（0，20 )，平均可以抢到10元。<br>假设第二个人随机到10元，那么剩余金额是90-10 = 80 元。<br>80/8X2 = 20, 所以第三个人的随机范围同样是（0，20 )，平均可以抢到10元。<br>以此类推，每一次随机范围的均值是相等的。</p></blockquote><p>代码实现如下（只考虑思路）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer[] splitRedPackageAlgorithm(<span class="type">int</span> totalMoney, <span class="type">int</span> redPackageNumber) &#123;</span><br><span class="line">     Integer[] redPackageNumbers = <span class="keyword">new</span> <span class="title class_">Integer</span>[redPackageNumber];</span><br><span class="line">     <span class="comment">//已经被抢夺的红包金额,已经被拆分塞进子红包的金额</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">useMoney</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; redPackageNumber; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span> (i == redPackageNumber - <span class="number">1</span>) &#123;</span><br><span class="line">         redPackageNumbers[i] = totalMoney - useMoney;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">//二倍均值算法，每次拆分后塞进子红包的金额 = 随机区间(0,(剩余红包金额M ÷ 未被抢的剩余红包个数N) * 2)</span></span><br><span class="line">         <span class="type">int</span> <span class="variable">avgMoney</span> <span class="operator">=</span> ((totalMoney - useMoney) / (redPackageNumber - i)) * <span class="number">2</span>;</span><br><span class="line">         redPackageNumbers[i] = <span class="number">1</span> + <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(avgMoney - <span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         useMoney = useMoney + redPackageNumbers[i];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> redPackageNumbers;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="3-高并发下怎么抢红包？"><a href="#3-高并发下怎么抢红包？" class="headerlink" title="3.高并发下怎么抢红包？"></a><strong>3.高并发下怎么抢红包？</strong></h3><p>要求做到数据一致性+高可用+不加锁，这种情况应该使用什么技术？首先类似于抢票系统中的“超卖问题”，要保证被抢金额不超过发红包的总金额，这块个人觉得阳哥讲的不是很清楚，在抢票系统中，我们常常使用锁来解决“超卖问题”，可以优化为乐观锁解决问题，但是在红包雨系统中，所有人都要去操作一个红包，所以肯定不能加锁，也就是上面说的”不加锁“，阳哥在这只说了使用lpop去抢红包，并没有解释数据一致性的实现，我的理解是在拆分红包的二分均值算法中的在最后一个包时分配”总金额-已抢金额“，这里就可以保证金额不超额，而在抢红包时只需要保证抢的包个数不大于分包总个数即可，这就和抢票系统一样了，在每次抢红包时判断剩余红包个数大于0即可。</p><h3 id="4-记录红包争抢数据的功能怎么实现？"><a href="#4-记录红包争抢数据的功能怎么实现？" class="headerlink" title="4.记录红包争抢数据的功能怎么实现？"></a><strong>4.记录红包争抢数据的功能怎么实现？</strong></h3><p>类似于微信红包，结束后会显示每个人抢了多少，这就需要记录短期的个人抢红包数据，阳哥还提了一点就是需要记录长期的数据，比如一年中发了多少红包和抢了多少红包，这一点有点类似于微信的账单功能，怎么去记录呢？首先数据结构选择Redis的Hash结构，在每一次请红包后，使用”hset 活动id 用户id 金额”存入每个用户抢了多少红包，年度红包统计就比较简单了，将每次抢发红包数分别加起来就可以了，至于数据的持久化，也可以将数据存入mySql中。</p><h3 id="5-发送的红包未抢完在24小时后回退给发送者怎么实现？"><a href="#5-发送的红包未抢完在24小时后回退给发送者怎么实现？" class="headerlink" title="5.发送的红包未抢完在24小时后回退给发送者怎么实现？"></a><strong>5.发送的红包未抢完在24小时后回退给发送者怎么实现？</strong></h3><p>这个功能就比较简单了，在活动结束后，计算剩余金额，设置定时任务，24小时后回退即可，可以使用redis实现也可以使用MQ实现。</p><p>这个功能和订单下单5分钟未付款就取消订单一个原理，后面有时间我也会去整理一下该功能的实现思路。</p><h2 id="并发量持续加大，怎么处理？（集群）"><a href="#并发量持续加大，怎么处理？（集群）" class="headerlink" title="并发量持续加大，怎么处理？（集群）"></a><strong>并发量持续加大，怎么处理？（集群）</strong></h2><p>上面单机模式作为一个微服务，在并发量持续加大的情况下就需要做集群处理了。</p><p>在集群中需要考虑的问题：<br>1.如果有人盗刷，怎么配置白名单？<br>2.怎么做到削峰限流、服务熔断、服务降级、服务流控，最终实现分割+限流+软件负载均衡？</p><p>实现这两个问题中的功能有很多种方法，问题一可以用gateway业务网关+隔离策略解决，问题二中的限流就可以用nginx流量网关解决，但是负载均衡就需要配置集群的负载均衡策略了。</p><h2 id="前后端调用架构？"><a href="#前后端调用架构？" class="headerlink" title="前后端调用架构？"></a><strong>前后端调用架构？</strong></h2><p>整体流程架构图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/twigIcer/markdown-img@main/imgs/image.png" alt=""></p><p>课程为了节省时间，前后端交互使用的是WebSocket，在正式搭建时，可以使用MQ，在活动开始前将所有发送请求的用户放入WebSocket候客室中，活动开始准时进行抢红包活动。</p><h2 id="更近一步的服务扩容？"><a href="#更近一步的服务扩容？" class="headerlink" title="更近一步的服务扩容？"></a><strong>更近一步的服务扩容？</strong></h2><p>这一步讲的就是在云上去部署组件集群、服务集群等，课程中是在阿里云服务器进行部署，个人认为这部分讲的最好，雷神一步一步操作教学，看的我挺上瘾的，收获也不少。</p><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a><strong>小结：</strong></h2><p>尚硅谷的这四节直播课的含金量非常高，本文也相当于对第一节课程做了一篇笔记，现在再想想当时的那道面试题：如果要设计一个红包系统，比如春晚红包雨，在这种高并发的环境下，该怎么设计？我会先讲整体架构，然后讲怎么数据一致性+不加锁+高可用，后面再讲讲集群…唉，只能说相见恨晚啊！课程链接放下面，需要的友友可以直接点击跳转，也可以直接去B站搜索“红包雨开发架构设计”。</p><p>红包雨架构分析：<a href="https://www.bilibili.com/video/BV18k4y1P7sh/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=27972b4e93b4f51f10811f1f46f853b4">https://www.bilibili.com/video/BV18k4y1P7sh/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=27972b4e93b4f51f10811f1f46f853b4</a></p><p>中间件与交互设计：<a href="https://www.bilibili.com/video/BV18k4y1P7sh?p=2">https://www.bilibili.com/video/BV18k4y1P7sh?p=2</a></p><p>UI与前后端联调：<a href="https://www.bilibili.com/video/BV18k4y1P7sh?p=3&amp;vd_source=27972b4e93b4f51f10811f1f46f853b4">https://www.bilibili.com/video/BV18k4y1P7sh?p=3&amp;vd_source=27972b4e93b4f51f10811f1f46f853b4</a></p><p>云上弹性部署：<a href="https://www.bilibili.com/video/BV18k4y1P7sh?p=4&amp;vd_source=27972b4e93b4f51f10811f1f46f853b4">https://www.bilibili.com/video/BV18k4y1P7sh?p=4&amp;vd_source=27972b4e93b4f51f10811f1f46f853b4</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>对当下高等教育的一点思考</title>
      <link href="/2023/07/01/toEducate/"/>
      <url>/2023/07/01/toEducate/</url>
      
        <content type="html"><![CDATA[<p>其实很早就想写点这方面的东西了，但是想法很杂，也一直在考虑发出来合不合适，毕竟现在很多事扯上某些字就会有很多问题，但是最近的一些事让人忍不住想写，先手动狗头保个命吧，声明：本文仅代表个人观点，无引导意向，权当看乐。</p><p>今天看到网友们整活：由山东、山西、河南、河北四省联办山河大学，选址在四省交界处，校长为杜甫，意在“大庇天下寒士俱欢颜”，专业有两个，考公和考研，目标“三年超清华，五年赶北大”，效率也很高：上午出想法，中午出方案，下午出校徽，晚上出宿舍和四门规划设计，现在校园卡，录取通知书，校园表白墙等等，应有尽有。</p><p>说实话，内心居然还有点相信这学校可以做起来，当然更多的是看个热闹，不过这热闹背后也反应了一些问题：先提一下教育资源分配不合理的问题吧，河南省作为高考大省，居然没有一所985高校，连211高校都只有一所，更有“山河四省凑不出三所985”的评论刷屏，当然这里面的缘由很多，我也说不清，这也不是我思考的重点，只是有点心疼这四个省的学生。我更关注的点是山河大学只有两个专业：考研和考公，这个点再次激起了我对现在高等教育的思考。</p><p>首先，我个人觉得应该加一个“就业”专业，大多数大学生都会面临的一个重大抉择就是：未来是考公？考研？还是就业？站在现阶段自己的角度，一位双非本科准大四学生的角度，这三条路都是那么的难走。</p><p>为什么难走？以就业来说，学完了学校安排的各门课程，甚至成绩还都不错，但是简历照样没有东西可写，面试照样一问三不知。我很认同山河大学只有“考公和考研”两个专业，直接将教学目标定位到未来选择方向上，而不是打着“要培养出德智体美劳全面发展的优秀人才”旗号将学生们一把抓，按照几十年前的培养方案来开设课程，到大三学生做选择时，发现自己选就业吧，好像根本没学到什么技术；选考公吧，行测申论也要从头来学；也就考研课程全学过，但是也是为了期末考试学的，经过其他无关课程的学习，该忘的也忘的差不多了。</p><p>如果能从一开始就将培养计划定为：就业/考公/考研，用三年的时间去冲击现在一年时间的目标，是不是更容易？学生的压力是不是会小很多？甚至很多学生可以同时进行两手甚至三手打算，时间完全足够，这样不好吗？当然，如果真的这样推行了，也会有很多问题，首先，热门就业专业火爆，考研考公专业也一样，但是冷门专业面临这取消，很多教师会失业；其次，资本会继续提高对求职者的能力下限要求，行业更加内卷；还有考研考公率上升，考研考公人数继续增加，内卷更加严重…问题是很多，但是改革必定伴随着动荡，动荡最终会趋于稳定，还记得初中历史讲过，进步的两种方式：改革和革命，中国不是很擅长逐步推进嘛，我也很相信中国会有更好的方案，或者有能力解决这些问题，教育制度不能就这么停滞不前。</p><p>最近张雪峰的事也闹的沸沸扬扬，张雪峰在最该说话的时候“被迫住院”，甚至人民日报都轰击他，可见他动的蛋糕有多大，他给别人推荐专业都是根据家庭情况考虑，以就业为目的推荐的，这有什么错呢？所谓我们大学生处于最美好的年纪，我们不应该一味的去思考就业，我们目标高远，为理想奋斗，励志为祖国做奉献…编不下去了，这种所谓的高远理想是应该存在于小学生的心中的，现在社会对大学毕业生的剥削很严重，理想？理想能当饭吃吗？工作才有工资，有工资才能生活，这就是现实啊，大多数普通大学生毕业后都是需要就业的吧，甚至于考公考研不也是为了更好就业吗？所以我认为高等教育将就业为目标并没有错。</p><p>前不久有学生放假前提前请假导员没批然后擅自离校给处分的热搜，当然这件事，学生肯定有错，我也不打算重点说这件事，我看见很多评论是“学生不就应该上课吗？”“不去上课是对老师的不尊重”等等，其实这两句话没错，但是放在大学生身上不合适。<br>为什么很多大学生选择逃课？贪玩是一部分原因，但是也有很多其他因素，首先，我其实一直坚信在大学很多事情远比上课重要：“去见一见许久未见的朋友”，“去看一场唯美且治愈的日出”，“去奔赴一场爱情”…。</p><p>其次，老师们是不是也需要反思一下？课程质量低下，讲课没有丝毫激情，甚至有老师声音小到只有前三排能听清，这种课去上有什么意义呢？另外，现在网络资源丰富，很多老师的讲课水平远远跟不上B站老师的水平，而且上课两小时讲清的内容，B站老师二十分钟就能讲清，我为什么要在课堂上浪费时间呢？</p><p>说实话，有时候我觉得“平时分”这个东西的存在也并不合理，甚至有人期末考八十多，但因为平时分低而挂科，我也不知道这样的老师是什么心理？是为了保证自己教学的成绩保持正态分布？还是宣告自己的权威？我觉得如果说教学的目的是为了让学生掌握知识，那不管学生以什么方式掌握都应该被允许，而不是限制在教室，如果教学的目的是为了应试，那么既然期末考过了就不应该被挂科，有人会以最开始我提到的“”学生的职责就是上课”“不上课你尊重老师了吗？”来反驳我，那么请问，老师的职责不是积极备课，提高教学水平给学生教学吗？，某些老师拿着几年十几年前早已经过时的ppt照着读，他们尽了他们的职责了吗？他们尊重学生了吗？当然，也有很多优秀的教师，这样的课逃课人数肯定想较少，这都是相互的。</p><p>最后，还有一个原因就是上面提到的课程安排不合理。如果学校安排的课程，尤其是一些专业课讲的知识，与学生就业方向不沾边，以后根本用不到，虽然很对专业课是自己选择的，但是一些学校一些专业提供的可选课程本来就少，为了修够学分只能被迫选择，另外，当一门课程选择人数少时，这门课程压根就开不起来，所以选不到合适的课程的概率还是非常大的，这时再去强迫学生上这门课，是不是不合理？学生利用上课时间去学习一些就业相关知识是不是更有用？</p><p>其实归根到底是高等教育制度落后于时代的发展，个人认为这个问题是很严重的，是急需被重视的。</p><p>这篇文章改了又改，我尽量让自己的措辞恰当一些，“文字狱”被废除这么久了，很多话还是不能说，尤其是关于残酷事实的zhen话，张雪峰被迫闭嘴，这是时代的悲哀，也让人害怕，我也怕，所以再次声明，本文仅个人观点，无不良言论，无引导意向，理性看待，求放过。</p>]]></content>
      
      
      <categories>
          
          <category> 胡思乱想 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
